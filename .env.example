### Artemis

# Secrets
#
# Generate a secret key using command:
#
#   $ cd apps/artemis_web && mix guardian.gen.secret
#
# Copy the output below and uncomment env variable:
#
# ARTEMIS_GUARDIAN_KEY=
# ARTEMIS_SECRET_KEY=

# Users
#
# ARTEMIS_ROOT_USER=
# ARTEMIS_ROOT_EMAIL=
#
# ARTEMIS_SYSTEM_USER=SystemUser
# ARTEMIS_SYSTEM_EMAIL=system@artemis.dev

# Database

ARTEMIS_POSTGRES_USER=postgres
ARTEMIS_POSTGRES_PASS=postgres
ARTEMIS_POSTGRES_HOST=localhost
ARTEMIS_POSTGRES_DB=artemis

ARTEMIS_IBM_CLOUDANT_SHARED_AUTH_TYPE=basic
ARTEMIS_IBM_CLOUDANT_SHARED_USERNAME=couchdb
ARTEMIS_IBM_CLOUDANT_SHARED_PASSWORD=couchdb
ARTEMIS_IBM_CLOUDANT_SHARED_HOSTNAME=localhost:5984
ARTEMIS_IBM_CLOUDANT_SHARED_SEARCH_ENABLED=false
ARTEMIS_IBM_CLOUDANT_SHARED_SEARCH_DESIGN_DOC=text-search
ARTEMIS_IBM_CLOUDANT_SHARED_SEARCH_INDEX=text-search-index

# Server

ARTEMIS_CLUSTER_NODES=artemis01@0.0.0.0,artemis02@0.0.0.0

# Actions
#
# Enable actions depending on deployment environment (e.g. development, demo,
# qa, test, production).
#
ARTEMIS_ACTION_IBM_CLOUD_IAM_ACCESS_TOKEN_ENABLED=false
ARTEMIS_ACTION_IBM_CLOUDANT_CHANGE_LISTENER=true
ARTEMIS_ACTION_IBM_CLOUDANT_MIGRATOR=true
ARTEMIS_ACTION_PAGER_DUTY_SYNCHRONIZE_INCIDENTS=true
ARTEMIS_ACTION_PAGER_DUTY_SYNCHRONIZE_ON_CALL=true
ARTEMIS_ACTION_REPO_DELETE_ALL_ENABLED=false
ARTEMIS_ACTION_REPO_GENERATE_FILLER_DATA_ENABLED=false
ARTEMIS_ACTION_REPO_RESET_ON_INTERVAL_ENABLED=false
ARTEMIS_ACTION_REPO_RESET_ON_INTERVAL_HOURS=24

# Integrations

ARTEMIS_IBM_CLOUD_IAM_API_KEY=
ARTEMIS_IBM_CLOUD_IAM_API_URL=https://iam.cloud.ibm.com

# ARTEMIS_PAGER_DUTY_SUBDOMAIN=
# ARTEMIS_PAGER_DUTY_TEAM_IDS=
# ARTEMIS_PAGER_DUTY_TOKEN=

### Artemis API

ARTEMIS_API_PORT=4078

### Artemis Log

# Database

ARTEMIS_LOG_POSTGRES_USER=postgres
ARTEMIS_LOG_POSTGRES_PASS=postgres
ARTEMIS_LOG_POSTGRES_HOST=localhost
ARTEMIS_LOG_POSTGRES_DB=artemis_log

# Actions

ARTEMIS_LOG_SUBSCRIBE_TO_EVENTS=true
ARTEMIS_LOG_SUBSCRIBE_TO_HTTP_REQUESTS=false

### Artemis Web

# Enabled Auth Providers
#
# Takes a list of providers: provider1,provider2
#
# Available providers:
#
# 	- `system_user` WARNING: development only! Enables anyone to directly log in as system user.
# 	- `github`
# 	- `w3id`
#
# For additional providers, see the List of UeberAuth Strategies:
# https://github.com/ueberauth/ueberauth/wiki/List-of-Strategies
#
ARTEMIS_WEB_ENABLED_AUTH_PROVIDERS=github,system_user
ARTEMIS_WEB_PORT=4077

# Secrets
#
# Generate a secret key using command:
#
#   $ cd apps/artemis_web && mix phx.gen.secret 32
#
# Copy the output below and uncomment env variable:
#
# ARTEMIS_WEB_LIVE_VIEW_SECRET_KEY=

### Ueberauth

# If using `github` auth provider, follow the GitHub directions to generate
# credentials: https://developer.github.com/apps/building-oauth-apps/
#
UEBERAUTH_GITHUB_CLIENT_ID=
UEBERAUTH_GITHUB_CLIENT_SECRET=

# If using `w3id` auth provider, follow the W3ID directions to generate
# credentials. Then update with values below.
#
UEBERAUTH_W3ID_CLIENT_ID=
UEBERAUTH_W3ID_CLIENT_SECRET=
UEBERAUTH_W3ID_TOKEN_URL=
UEBERAUTH_W3ID_AUTHORIZE_URL=

### Elixir Version

# Uncomment if using kiex
# ELIXIR_VERSION=1.8.1
# PATH=${HOME}/.kiex/elixirs/elixir-1.8.1/bin:${PATH}
# MIX_ARCHIVES=${HOME}/.kiex/mix/archives/elixir-1.8.1

### NodeJS Version

NODE_ENV=development

# Uncomment if using nvm
# NODE_VERSION=10.13.0
# PATH=${HOME}/.nvm/versions/node/v${NODE_VERSION}/bin:${PATH}

### Docker

# Uncomment if using docker
# ARTEMIS_POSTGRES_HOST=postgres
# ARTEMIS_LOG_POSTGRES_HOST=postgres
