defmodule Artemis.Helpers.CloudantSearch do
  alias Artemis.Drivers.IBMCloudant

  @cloudant_search_design_doc "text-search"
  @cloudant_search_index "text-search-index"

  def get_query_url(host, database) do
    "#{host}/#{database}/_design/#{@cloudant_search_design_doc}/_search/#{@cloudant_search_index}"
  end

  def enable_search(cloudant_host, cloudant_database, search_fields) do
    path = "#{cloudant_host}/#{cloudant_database}"

    {:ok, document} = get_or_create_search_document(path)

    current_indexes = Map.get(document, "indexes", %{})
    current_search_function = Artemis.Helpers.deep_get(current_indexes, [@cloudant_search_index, "index"])
    search_function = generate_search_index(search_fields)

    case search_function == current_search_function do
      true -> {:ok, "Search index already exists"}
      false -> create_search_index(path, document, current_indexes, search_function)
    end
  end

  # Helpers

  defp get_or_create_search_document(path) do
    case get_search_document(path) do
      {:error, %{"error" => "not_found"}} -> create_search_document(path)
      response -> response
    end
  end

  defp get_search_document(path) do
    IBMCloudant.call(%{
      method: :get,
      url: "#{path}/_design/#{@cloudant_search_design_doc}"
    })
  end

  defp create_search_document(path) do
    {:ok, _} =
      IBMCloudant.call(%{
        body: "{}",
        method: :put,
        url: "#{path}/_design/#{@cloudant_search_design_doc}"
      })

    get_search_document(path)
  end

  defp generate_search_index(fields) do
    fields_without_default = List.delete(fields, :_id)

    clauses =
      Enum.map(fields_without_default, fn field ->
        """
          if (typeof(doc.#{field}) !== 'undefined') {
            index("#{field}", doc.#{field});
          }
        """
      end)

    """
    function (doc) {
      // Warning
      //
      // Automatically generated by Dashboard Application
      // Changes will be overwritten

      index("default", doc._id);

      #{Enum.join(clauses, "\n")}
    }
    """
  end

  defp create_search_index(path, document, current_indexes, search_function) do
    search_index = Map.put(%{}, @cloudant_search_index, %{"analyzer" => "standard", "index" => search_function})
    indexes = Map.merge(current_indexes, search_index)
    body = Map.put(document, "indexes", indexes)
    url = "#{path}/_design/#{@cloudant_search_design_doc}"

    IBMCloudant.call(%{
      body: Jason.encode!(body),
      method: :put,
      url: url
    })
  end
end
