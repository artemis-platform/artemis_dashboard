defmodule Artemis.CreateManyIncidents do
  use Artemis.Context

  alias Artemis.Incident
  alias Artemis.Repo

  def call!(params, user) do
    case call(params, user) do
      {:error, _} -> raise(Artemis.Context.Error, "Error creating many incidents")
      {:ok, results} -> results
    end
  end

  def call(params, _user) when params == [], do: {:ok, %{total: 0}}
  def call(params, user) when is_map(params), do: call([params], user)

  def call(params, user) do
    with_transaction(fn ->
      params
      |> insert_records
      |> Event.broadcast("incident:created:many", user)
    end)
  end

  defp insert_records(params) do
    params =
      params
      |> filter_entries()
      |> filter_attributes()
      |> merge_autogenerated_attributes()

    options = [
      conflict_target: [:source, :source_uid],
      on_conflict: {:replace, get_param_keys(params)},
      returning: [:source_uid]
    ]

    case Repo.insert_all(Incident, params, options) do
      {:error, message} ->
        {:error, message}

      {0, _} ->
        {:ok, %{source_uids: [], total: 0}}

      {total, entries} ->
        source_uids = Enum.map(entries, & &1.source_uid)

        {:ok, %{source_uids: source_uids, total: total}}
    end
  end

  defp get_param_keys(params) when is_list(params) do
    with true <- length(params) > 0,
         first <- hd(params),
         true <- is_map(first) do
      first
      |> Map.delete([:id])
      |> Map.keys()
    else
      _ -> []
    end
  end

  defp get_param_keys(_params), do: []

  defp filter_entries(params) do
    Enum.filter(params, fn entry ->
      cond do
        entry == nil -> false
        entry == "" -> false
        true -> Incident.changeset(%Incident{}, entry).valid?
      end
    end)
  end

  defp filter_attributes(params) do
    Enum.map(params, &Map.take(&1, Incident.updatable_fields()))
  end

  # Ecto insert_all/3 does not support autogenerated attributes like timestamps.
  #
  # See: https://hexdocs.pm/ecto/Ecto.Repo.html#c:insert_all/3
  defp merge_autogenerated_attributes(params) do
    now =
      DateTime.utc_now()
      |> DateTime.truncate(:second)
      |> Timex.to_naive_datetime()

    autogenerated_attributes = %{
      inserted_at: now,
      updated_at: now
    }

    Enum.map(params, &Map.merge(&1, autogenerated_attributes))
  end
end
